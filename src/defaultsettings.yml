# Default settings for the bot
# DO NOT EDIT THIS FILE -- MAKE CUSTOMIZATIONS IN YOUR botconfig.yml FILE INSTEAD
# See https://ww.chat/config for more information, including valid options -- that page is automatically
# generated from the documentation specified here, and is much more human-readable than this file.
# This file has different formatting from botconfig.yml; you cannot expect to copy/paste things over correctly.

connection: &connection
  _name: connection
  _desc: Connections represent networks that the bot will connect to in the outbound direction.
  _type: dict
  _default:
    host:
      _desc: Hostname or IP address to connect to.
      _type: str
    port:
      _desc: Port number to connect to.
      _type: int
    source:
      _desc: >
        IP address to use as our source IP for the outbound connection.
        If the empty string, uses the default logic of the OS to determine source IP.
      _type: str
      _default: ""
    ssl:
      _desc: >
        Settings controlling whether or not encrypted connections are used, and server-specific
        options for encrypted connections.
      _type: dict
      _default:
        use_ssl:
          _desc: Whether or not to use encrypted connections when connecting to the server.
          _type: bool
          _default: true
        verify_peer:
          _desc: >
            If set, try to verify the server certificate of the remote side to ensure it is valid and
            chains to a trusted Certificate Authority (CA). Certificates whose fingerprints are listed in
            trusted_fingerprints will also verify successfully even if they don't chain to a trusted CA
            so long as they pass all other validation checks (e.g. not revoked or expired). Disabling
            this can have disastrous consequences.
          _type: bool
          _default: true
        trusted_fingerprints:
          _desc: |
            List of trusted server fingerprints. If the server certificate does not chain to a trusted CA,
            it is preferable to configure the fingerprints here rather than disabling verification.
            Fingerprints must be hashed with SHA-256. If configured, it will look like so:

            <pre>
            trusted_fingerprints:
              - 74:51:AD:BF:59:B2:47:76:A8:64:97:E8:82:6B:A5:99:C9:CB:E1:64:F5:F2:B4:84:2A:9B:F7:F4:88:21:88:3F
            </pre>

            To obtain a fingerprint, run the following command, replacing "irc.libera.chat:6697"
            with correct values for your host and port number.

            <pre>
            openssl s_client -connect irc.libera.chat:6697 < /dev/null 2>/dev/null | openssl x509 -fingerprint -sha256 -noout -in /dev/stdin
            </pre>
          _type: list
          _default: [ ]
          _items:
            _type: str

transports.irc.channel: &transports.irc.channel
  _name: transports.irc.channel
  _desc: >
    Channels can generally be specified as simple strings, but sometimes more advanced configuration is needed
    under special circumstances. You can pass either a string or a full instance of this object anywhere a channel
    is required.
  _type: dict
  _ctors:
    - _type: str
      _set: name
  _default:
    name:
      _desc: Channel name, be sure to surround with quotes so it is not interpreted as a comment!
      _type: str
    key:
      _desc: Channel key, if the channel is password protected (channel mode +k).
      _type: str
      _default: ""
    prefix:
      _desc: All messages to this channel will be using this message prefix, if specified.
      _type: str
      _default: ""
    auto_mode_toggle:
      _desc: >
        The channel modes which will be automatically toggled for the duration of the game.
        This is traditionally used to remove op status from players during the game.
      _type: list
      _default: []
      _items:
        _type: str

transports.irc: &transports.irc
  _name: transports.irc
  _desc: A connection to an IRC network. The network must have some notion or support of accounts separate from nicks.
  _type: dict
  _default:
    name:
      _desc: Name of this transport. Can be anything, but must be defined and unique across all transports in this file.
      _type: str
    module:
      _desc: >
        What IRCd the remote is running. Configuring this wrong may have disastrous consequences.
        If you do not see a module for your ircd, please use "generic"; some lykos features may be disabled.
        If you notice bugs with the generic module with your ircd, please contact the lykos developers.
      _type: enum
      _default: generic
      _values:
        - hybrid
        - inspircd
        - generic
        - solanum
        - unrealircd
    user:
      _desc: Configures the bot user for this connection.
      _type: dict
      _default:
        nick:
          _desc: >
            The bot's nickname. If already taken, we may attempt to recover this depending on what services
            module was selected.
          _type: str
        ident:
          _desc: The bot's ident. If unset, defaults to the bot's nickname.
          _type: str
          _nullable: true
          _default: null
        realname:
          _desc: The bot's realname (gecos). If unset, defaults to the bot's nickname.
          _type: str
          _nullable: true
          _default: null
        command_prefix:
          _desc: >
            We only respond to commands in-channel if they begin with this prefix.
            Commands in private with this prefix are not relayed to other players in wolfchat, deadchat, etc.
            Use quotes around the character to prevent YAML from interpreting it as something special.
          _type: str
          _default: "!"
        ignore:
          _desc: Certain categories of commands can be ignored by the bot.
          _type: dict
          _default:
            hidden:
              _desc: Ignore commands sent to a channel prefix (STATUSMSG), e.g. @#channel or +#channel.
              _type: bool
              _default: true
            channel_notice:
              _desc: Ignore /notices sent to the channel.
              _type: bool
              _default: true
            private_notice:
              _desc: Ignore /notices sent directly to the bot.
              _type: bool
              _default: false
    channels:
      _desc: Channels that the bot will join upon startup.
      _type: dict
      _default:
        main:
          _desc: Main game channel. Be sure to use quotes around the name so it is not treated as a comment!
          _type: *transports.irc.channel
        alternate:
          _desc: >
            Alternate channels. The bot will join these and respond to some commands, but games cannot be played here.
            If you define IRC channels as logging targets, those channels will need to be listed here as well.
          _type: list
          _default: []
          _items:
            _type: *transports.irc.channel
    connection:
      _desc: Describes how the bot connects to the IRC network.
      _type: *connection
    authentication:
      _desc: Authentication settings for the network or services.
      _type: dict
      _default:
        server:
          _desc: >
            Server authentication via the PASS command, such as if a connection password is required.
            If unset, we may send the services username and password via the PASS command if SASL is disabled,
            depending on the services and ircd modules in use.
          _type: dict
          _default:
            password:
              _desc: Server connection password.
              _type: str
              _nullable: true
              _default: null
        services:
          _desc: >
            Services authentication. We support sending regular IDENTIFY commands to NickServ (or equivalent)
            and support both SASL PLAIN (password-based auth) and SASL EXTERNAL (client certificate auth).
          _type: dict
          _default:
            module:
              _desc: >
                What services package is in use by the network. We may vary how we send authentication details
                and how we recover an in-use nickname based on this selection. Configuring this wrong may have
                disastrous consequences. If none of the modules listed fit your connection, try using
                "generic" if your services package has NickServ with the IDENTIFY and GHOST commands.
                Otherwise, use "none" to disable services integration.
              _type: enum
              _values:
                - anope
                - atheme
                - generic
                - none
                - undernet
            username:
              _desc: >
                Username to log into services with, if the services module supports usernames different from the
                current nick. If unset, uses the configured nick in the user settings.
              _type: str
              _nullable: true
              _default: null
            password:
              _desc: Password to log into services with. Leave unset if using client certificate authentication.
              _type: str
              _nullable: true
              _default: null
            use_sasl:
              _desc: >
                Whether or not to use SASL to authenticate. It is recommended to enable this if the network
                supports SASL, to ensure that the bot is fully authenticated before joining any channels.
              _type: bool
              _default: true
            client_certificate:
              _desc: >
                Client certificate to connect with, in PEM format. You may either have this be a filename containing
                the certificate or directly embed the certificate in this configuration file (use the "|" multiline format).
                The private key may be optionally present in PEM format after the certificate. Leave unset if using
                password authentication.
              _type: str
              _nullable: true
              _default: null
            client_key:
              _desc: >
                Private key to connect with, in PEM format, if it was not already specified in client_certificate.
                This may be either a filename containing the key or directly embedded in this configuration file
                (use the "|" multiline format). Leave unset if using password authentication or if the private key
                is already present as part of the client_certificate configuration value.
              _type: str
              _nullable: true
              _default: null
    flood:
      _desc: >
        Settings to control how quickly the bot will send messages to IRC. The bot can send an initial burst
        of messages, but will slow down after a short period. This is represented using a token bucket: each
        message sent consumes 1 token. The bucket starts with some number of tokens (initial burst amount), and
        replenishes 1 token every so often (sustained rate). If no messages are sent for a while, it can accumulate
        up to some maximum number of tokens (max burst).
      _type: dict
      _default:
        initial_burst:
          _desc: Initial message burst amount when bot starts (starting number of tokens).
          _type: int
          _default: 23
        sustained_rate:
          _desc: Once we can't burst anymore, we can send 1 message per this many seconds (token replenish rate).
          _type: float
          _default: 1.73
        max_burst:
          _desc: Maximum number of messages we can burst at any point in time (maximum number of tokens).
          _type: int
          _default: 23
    server_ping:
      _desc: How often the bot should ping the IRC server to check for unclean disconnection.
      _type: int
      _default: 120
    features:
      _desc: >
        Enables fine-grained control over what ircd features we use. This can be used to further customize
        behavior enabled or disabled by the module selection. Please use with care, as lykos may break if
        you enable things that the ircd does not support.
      _type: dict
      _default:
        cprivmsg:
          _desc: Whether or not CPRIVMSG is enabled. If null, use the setting determined by the module in use.
          _type: bool
          _nullable: true
          _default: null

transports: &transports
  _name: transports
  _desc: >
    The transports section defines all of the connections your bot will make.
    At least one transport must be defined for the bot to successfully run.
  _type: list
  _default: []
  _items:
    _type: tagged
    _tags:
      irc: *transports.irc

ssl: &ssl
  _name: ssl
  _desc: SSL settings that apply to all connections made by the bot.
  _type: dict
  _default:
    ca_file:
      _desc: Path to a file containing all trusted Certificate Authorities (CAs). If unset, use system default.
      _type: str
      _nullable: true
      _default: null
    ciphers:
      _desc: >
        All ciphers that the bot will make use of. By default, we track
        [https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29
        Mozilla's "intermediate" compatibility list].
      _type: str
      _default: ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384

access.template: &access.template
  _name: access.template
  _desc: A template associates a friendly name with a collection of flags.
  _type: dict
  _default:
    name:
      _desc: Name of the template, must be unique.
      _type: str
    flags:
      _desc: Flags that this template grants. For readability, it is recommended to list them in alphabetical order.
      _type: str

access.entry: &access.entry
  _name: access.entry
  _desc: >
    An access entry associates an account on a given transport with an access template. Unlike the fflags command,
    access entries in the configuration file must be associated with a template, and cannot be a freeform collection
    of flags.
  _type: dict
  _default:
    transport:
      _desc: Transport name that the account being granted access is on.
      _type: str
    account:
      _desc: Account name being granted access.
      _type: str
    template:
      _desc: Access template to grant to the account.
      _type: str
    hostmask:
      _desc: >
        Hostmask for the user being granted access. This may be used as an alternative to account-based
        authentication on servers that do not have a services complex to handle account registration and login.
      _type: str
      _nullable: true
      _default: null

access: &access
  _name: access
  _desc: >
    The access section defines shorthand notation "templates" for collections of flags as well as allows
    you to define a list of accounts who have access to the bot. In addition to this section, access can be granted
    to accounts via the fflags command. Access granted via the command is stored in the database rather than the
    configuration file, and the command is unable to modify or delete entries present in the file.
  _type: dict
  _default:
    templates:
      _desc: >
        Templates are a way to associate a friendly name with a collection of flags. By default, three templates
        are defined:

        * owner: full access to the bot and can execute every command

        * admin: access to manage moderators and execute commands which can update the bot's code
        or cause it to restart

        * moderator: manage games in progress and warn users, but cannot manage access entries
        or cause the bot to restart
      _type: list
      _default:
        - name: owner
          flags: AaDdFfgjmNpSsw
        - name: admin
          flags: AaDdfgjmNpSsw
        - name: moderator
          flags: AadgjmNpSsw
      _items:
        _type: *access.template
    entries:
      _desc: List of accounts with access to the bot.
      _type: list
      _default: []
      _items:
        _type: *access.entry

logging.group: &logging.group
  _name: logging.group
  _desc: A collection of things to log. Logs specify which groups are written to them.
  _type: dict
  _default:
    name:
      _desc: The name of the group, must be unique.
      _type: str
    filters:
      _desc: >
        Only log events whose types match one of the specified filters. Leave empty to log everything.

        * command: The commands filter logs restricted commands. Specific commands and sub-commands
        can be used instead via command.commandname (e.g. command.fsay or command.fwarn.add).

        * exception: The exception filter logs exceptions. Specific exception types can be used
        via exception.type (e.g. exception.TypeError).

        * general: The general filter logs events that do not fit under any more specific filter.
        This is generally used by messages that are expected to be printed to stdout.

        * transport: The transport filter logs traffic sent to and received from transports. Specific
        transports can be used via transport.name.

        * game: The game filter logs game events, such as all executed commands and other game details.
        Debug-level game events are only logged if the bot is operating in debug mode to prevent cheating.

        * Additional filters may be defined by Python itself and are outside the scope of this documentation.
      _type: list
      _default: []
      _items:
        _type: str

logging.log.handler.file.rotate.bytes: &logging.log.handler.file.rotate.bytes
  _name: logging.log.handler.file.rotate.bytes
  _desc: >
    Rotate the file after it reaches a certain size in bytes.
    See [https://docs.python.org/3/library/logging.handlers.html#rotatingfilehandler the Python documentation]
    for more information.
  _type: dict
  _default:
    max_bytes:
      _desc: When this threshold is about to be met, rotate the file.
      _type: int
    backup_count:
      _desc: How many old files are saved before the oldest is deleted.
      _type: int

logging.log.handler.file.rotate.timed: &logging.log.handler.file.rotate.timed
  _name: logging.log.handler.file.rotate.timed
  _desc: >
    Rotate the file on timed intervals.
    See [https://docs.python.org/3/library/logging.handlers.html#timedrotatingfilehandler the Python documentation]
    for more information.
  _type: dict
  _default:
    when:
      _desc: Specifies the type of interval.
      _type: enum
      _values:
        - S
        - M
        - H
        - D
        - W0
        - W1
        - W2
        - W3
        - W4
        - W5
        - W6
        - midnight
    interval:
      _desc: >
        Combined with when to determine when to rotate the file.
        If when is W0-W6, interval is ignored and can be omitted.
      _type: int
      _default: 1
    at_time:
      _desc: >
        If when is W0-W6 or midnight, this computes the initial rollover time.
        The value specified here should be of the format HH:MM or HH:MM:SS
      _type: str
    backup_count:
      _desc: How many old files are saved before the oldest is deleted.
      _type: int
    utc:
      _desc: Whether or not times are interpreted to be in UTC.
      _type: bool
      _default: false

logging.log.handler.file: &logging.log.handler.file
  _name: logging.log.handler.file
  _desc: Writes the log to a file on the disk.
  _type: dict
  _default:
    file:
      _desc: >
        The path to the file to write. Can be either a relative or absolute path.
        If a relative path is given, it is relative to the bot root.
      _type: str
    rotate:
      _desc: >
        Whether or not the files should rotate. Files can rotate when they've reached
        a maximum byte count or after a certain time interval has passed (but not both).
      _type: tagged
      _tags:
        bytes: *logging.log.handler.file.rotate.bytes
        timed: *logging.log.handler.file.rotate.timed
      _nullable: true
      _default: null

logging.log.handler.stream: &logging.log.handler.stream
  _name: logging.log.handler.stream
  _desc: Writes the log to a stream (stdout or stderr).
  _type: dict
  _default:
    stream:
      _desc: Which stream to write the log to.
      _type: enum
      _values:
        - stdout
        - stderr

logging.log.handler.transport: &logging.log.handler.transport
  _name: logging.log.handler.transport
  _desc: Defines a transport and a location in that transport to send log messages.
  _type: dict
  _default:
    transport:
      _desc: The name of the transport to write the log to.
      _type: str
    destination:
      _desc: >
        An optional location in the transport to write the log. Each transport interprets this differently.

        * For the irc transport, this should be a channel name (remember to surround it in quotes). If the
        irc server supports STATUSMSG, you may add a prefix to the channel object.
      _type: str
      _nullable: true
      _default: null

logging.log.handler.custom: &logging.log.handler.custom
  _name: logging.log.handler.custom
  _desc: A custom handler defined via user-specified code.
  _type: dict
  _default:
    module:
      _desc: Module name that contains the custom handler class.
      _type: str
    class:
      _desc: >
        Class name of the custom handler class, should derive from src.logger.UnionFilterMixin and
        logging.Handler (or one of its subclasses), in that order. Subclassing one of the built-in
        handlers from src.logger will meet this criteria.
      _type: str
    args:
      _desc: Keyword arguments passed to the class constructor.
      _type: dict
      _default: {}
      _extra: true

logging.log: &logging.log
  _name: logging.log
  _desc: A definition of what group to log and where to write the log.
  _type: dict
  _default:
    group:
      _desc: Group name to log.
      _type: str
    handler:
      _desc: Defines how and where the log is written.
      _type: tagged
      _tags:
        file: *logging.log.handler.file
        stream: *logging.log.handler.stream
        transport: *logging.log.handler.transport
        custom: *logging.log.handler.custom
    level:
      _desc: Only logging events of this level or more severe are sent to this log.
      _type: enum
      _default: info
      _values:
        - critical
        - error
        - warning
        - info
        - debug
    format:
      _desc: >
        How data sent to the log is formatted.

        * The string formatter writes a single log line (ending in newline) to the log,
        optionally with a timestamp in front.

        * The structured formatter sends a JSON string to the log representing an object. Exactly which fields
        are present in the object will vary based on the type of thing being logged. This format is useful when
        ingesting logs into something capable of processing the metadata and doing things with it.
      _type: enum
      _default: string
      _values:
        - string
        - structured
    timestamp:
      _desc: >
        How the timestamp is presented in the logs. It will be prepended to string logs and available as a
        "timestamp" field in structured logs.
      _type: dict
      _default:
        enabled:
          _desc: If true, a timestamp is added to the log record.
          _type: bool
          _default: true
        utc:
          _desc: If true, the timestamp will be in UTC. If false, it will use the current system's time.
          _type: bool
          _default: true
        format:
          _desc: >
            See [https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior the Python documentation]
            for more information on how to configure this. It is recommended to use quotes
            around this field to prevent YAML from interpreting any special characters.
          _type: str
          _default: "%Y-%m-%d %H:%M:%S%z"

logging: &logging
  _name: logging
  _desc: >
    The logging section defines all logging groups (collections of things to log) as well as where each group
    should be logged to. By default, nothing is logged; you should set up any desired logging in your botconfig.yml.
    Logs can be sent to a file or any defined transport (such as an IRC channel).
  _type: dict
  _default:
    groups:
      _desc: >
        Logging groups. By default, the following groups are defined:

        * main: log code issues and restricted commands to stdout

        * admin-commands: log all usages of restricted commands

        * warnings: log the usages of fwarn add, fwarn set, and fwarn del

        * debug: log all exceptions that occur
      _type: list
      _default:
        - name: main
          filters:
            - general
            - command
            - exception
            - transport
        - name: admin-commands
          filters:
            - command
        - name: warnings
          filters:
            - command.fwarn.add
            - command.fwarn.set
            - command.fwarn.del
        - name: debug
          filters:
            - exception
      _items:
        _type: *logging.group
    logs:
      _desc: Which groups should be logged and where those logs should be sent to.
      _type: list
      _default: []
      _items:
        _type: *logging.log

gameplay: &gameplay
  _name: gameplay
  _desc: The gameplay section is used to configure settings related to gameplay.
  _type: dict
  _default:
    language:
      _desc: The language the bot uses in messages and when processing incoming commands.
      _type: str
      _default: en
    ai_agents:
      _desc: The number of AI agents to add to the game.
      _type: dict
      _nullable: true
      _default:
        count:
          _desc: The number of AI agents to add to the game.
          _type: int
          _default: 0
    require_nickserv:
      _desc: Whether or not to require players to be identified to NickServ in order to join the game.
      _type: bool
      _default: true
    rules:
      _desc: >
        The rules for this bot, either as an embedded string or a URL, returned by the !rules command.
        If null, the !rules command will display that no rules have been configured.
      _type: str
      _nullable: true
      _default: null
    player_limits:
      _desc: >
        The lower and upper bounds of player counts for games. Note that most game modes do not support
        all player counts.
      _type: dict
      _default:
        minimum:
          _desc: The minimum player count for games to start.
          _type: int
          _default: 6
        maximum:
          _desc: The maximum player count for players to join.
          _type: int
          _default: 35
    start:
      _desc: The settings defining how many players must do !start for the game to start.
      _type: dict
      _default:
        scale:
          _desc: >
            Determines the scaling for the number of !start votes needed. This floating point number will
            be multiplied with the number of players, rounded up. This will not exceed the maximum below.
          _type: float
          _default: 0.3
        maximum:
          _desc: The maximum number of !start votes that the bot can require.
          _type: int
          _default: 4
    hidden:
      _desc: The roles here will hide their true identity upon dying.
      _type: dict
      _default:
        traitor:
          _desc: Reveal traitor as the hidden role, typically villager, if they die before turning.
          _type: bool
          _default: true
        amnesiac:
          _desc: Amnesiac will always show up as amnesiac when dying, even if they turned.
          _type: bool
          _default: false
        clone:
          _desc: Clone will always show up as clone when dying, even if they turned.
          _type: bool
          _default: false
    gunner_wolf:
      _desc: Determines some interactions between gunner and attacking wolves at night.
      _type: dict
      _default:
        kills_attacker:
          _desc: Determines the chance out of 100 that a gunner will kill a wolf when targeted at night.
          _type: int
          _default: 25
        steals_gun:
          _desc: Determines whether a wolf will steal a loaded gun from dead gunner.
          _type: bool
          _default: true
    safes:
      _desc: Defines the behaviour of safe roles, such as guardian angel, bodyguard, detective, doctor, and amnesiac.
      _type: dict
      _default:
        guard_self:
          _desc: Whether or not guardian angels can guard themselves.
          _type: bool
          _default: true
        angel_dies:
          _desc: Determines the chance out of 100 that a guardian angel will die when guarding a wolf.
          _type: int
          _default: 0
        bodyguard_dies:
          _desc: Determines the chance out of 100 that a bodyguard will die when guarding a wolf.
          _type: int
          _default: 0
        fallen_kills:
          _desc: >
            Determines the chance out of 100 that, when the wolves target someone guarded by a guardian angel,
            the fallen angel, if present, will kill the guardian angel.
          _type: int
          _default: 50
        detective_reveal:
          _desc: Determines the chance out of 100 that a detective will reveal their identity to wolves when investigating.
          _type: int
          _default: 40
        doctor_shots:
          _desc: >
            Determines how many shots the doctor gets. This floating point number will be multiplied with the number of
            alive players when the player gets the role, rounded up.
          _type: float
          _default: 0.135
        amnesiac_night:
          _desc: The amnesiac will get reminded of their true identity on this night.
          _type: int
          _default: 3
    totems:
      _desc: Determines how certain shaman totems interact with the game.
      _type: dict
      _default:
        exchange:
          _desc: Configuration related to the exchange totem, which can cause players to swap roles at any time
          _type: dict
          _default:
            minimum_time:
              _desc: >
                Minimum amount of time (in seconds) to allow the exchanged user to act after the role swap.
                If the current phase would end before this, the timer is extended to the minimum.
              _type: int
              _default: 30
    nightchat:
      _desc: >
        Whether or not nightchat is enabled in channel. If disabled, speaking privileges in the channel
        will be revoked from all players during the night phase.
      _type: bool
      _default: true
    deadchat:
      _desc: >
        Whether or not deadchat is enabled. Dead players and non-players can join deadchat to speak with
        each other during a game. If disabled, they will be unable to speak with each other through the bot.
      _type: bool
      _default: true
    quiet_dead_players:
      _desc: Whether or not to quiet players upon their death. Not all transports may support this.
      _type: bool
      _default: false
    wolfchat:
      _desc: >
        Many wolf roles have access to wolfchat, which allows them to communicate with each other throughout the
        night and day in private through the bot. This section allows for implementing restrictions on when wolfchat
        may be used and who is able to use it. These settings also apply to vampire chat, where sensible.
      _type: dict
      _default:
        disable_day:
          _desc: >
            If set, disables all wolfchat functionality during the day.
            Commands will still be relayed as applicable.
          _type: bool
          _default: false
        disable_night:
          _desc: >
            If set, disables all wolfchat functionality during the night.
            Commands will still be relayed as applicable.
          _type: bool
          _default: false
        only_kill_command:
          _desc: >
            If set, only the kill command is relayed. All other commands are not.
            This has no effect unless wolfchat is disabled for the player using the command.
          _type: bool
          _default: false
        only_same_command:
          _desc: >
            If set, commands are only relayed to roles who have access to the same command.
            This has no effect unless wolfchat is disabled for the player using the command.
          _type: bool
          _default: false
        wolves_only_chat:
          _desc: >
            If set, only real wolves (those with access to the kill command, wolf cub, and traitor) are able
            to participate in wolfchat. Other roles can observe what is said, but cannot speak; wolfchat is
            disabled for them. Their commands are still relayed as applicable.
          _type: bool
          _default: false
        remove_non_wolves:
          _desc: >
            If set, non-wolves (roles that are not real wolves) are removed from wolfchat entirely. They cannot
            speak or see what was spoken in wolfchat, and no commands are relayed from or to them. Wolves will
            not know that these players are wolfteam, and the wolves can kill them.
          _type: bool
          _default: false
        traitor_non_wolf:
          _desc: >
            If set, traitor is considered a non-wolf. Normally, they are treated as a real wolf for the purposes
            of wolfchat restrictions.
          _type: bool
          _default: false
    spectate:
      _desc: >
        Controls the behavior of the spectate command. This does not control the fspectate command, which never
        notifies the target chat that they are being observed. If you wish to ensure that the target chat is always
        notified, you should disable fspectate via gameplay.disable.commands and configure this appropriately.
      _type: dict
      _default:
        notice:
          _desc: >
            If set, the target chat is notified that they are being observed or no longer observed when a user
            begins or end spectating.
          _type: bool
          _default: true
        include_user:
          _desc: >
            If set, the notification sent to the target chat includes the name of the spectator.
            This has no effect if gameplay.spectate.notice is disabled.
          _type: bool
          _default: true
    disable:
      _desc: Allows you to disable roles, game modes, and commands from being used.
      _type: dict
      _default:
        roles:
          _desc: >
            Roles to disable. Roles listed here cannot be used in fgame roles, will never be chosen in
            game modes which randomize roles (e.g. random and maelstrom), will never be chosen as what
            an amnesiac will turn into, and will be replaced with the default role if it is encountered in
            a game mode definition. Use the internal role name in this list, rather than the localized name
            for your language.
          _type: list
          _default: []
          _items:
            _type: str
        gamemodes:
          _desc: >
            Game modes to disable. Modes listed here cannot be voted or used in fgame, and will never randomly
            appear when there is no majority vote for a game mode. Use the internal game mode name in this list,
            rather than the localized name for your language.
          _type: list
          _default: []
          _items:
            _type: str
        commands:
          _desc: >
            Commands to disable. Commands listed here cannot be used by anyone, not even admins. Use the internal
            command name in this list, rather than the localized name for your language. Disabling a command also
            disables all aliases for that command.
          _type: list
          _default: []
          _items:
            _type: str
    modes:
      _desc: >
        Allows you to adjust how likely it is for certain gamemodes to appear when there is not a majority vote.
        Some gamemodes may have additional settings that can be adjusted here as well.
        A mode set to have weight 0 will not appear unless there is a majority vote for the mode. To disable a mode
        entirely, use gameplay.disable.gamemodes instead.
      _type: dict
      _extra: true
      _default:
        aleatoire:
          _desc: Settings for the aleatoire game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 5
        alpha:
          _desc: Settings for the alpha game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 5
        boreal:
          _desc: Settings for the boreal game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            nights:
              _desc: How many nights the village needs to survive to win the game even if wolf shamans remain alive.
              _type: int
              _default: 7
            tribe:
              _desc: Settings controlling how the tribe behaves with respect to needing to be fed and starvation.
              _type: dict
              _default:
                base:
                  _desc: >
                    Percentage of alive players that determines the number of times the tribe needs to be fed.
                    This should be a number between 0 and 1 and is multiplied by the number of players.
                    Alive wolf shamans further reduce this multiplier; see gameplay.modes.boreal.tribe.adjust.
                  _type:
                    - float
                    - int
                  _default: 0.4
                adjust:
                  _desc: >
                    The percentage in gameplay.modes.boreal.tribe.base is reduced by this amount for each alive
                    wolf shaman. This reduces the number of times village needs to be fed while wolf shamans are alive
                    to slightly counteract the fact wolf shamans can pass around hunger totems.
                  _type:
                    - float
                    - int
                  _default: 0.03
                starve:
                  _desc: >
                    If the tribe is not sufficiently fed for this many nights, the wolves will win.
                    These nights need not be consecutive.
                  _type: int
                  _default: 3
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 1
        charming:
          _desc: Settings for the charming game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 5
        classic:
          _desc: Settings for the classic game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 0
        default:
          _desc: Settings for the default game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 40
        drunkfire:
          _desc: Settings for the drunkfire game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 0
        evilvillage:
          _desc: Settings for the evilvillage game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 5
        foolish:
          _desc: Settings for the foolish game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 5
        guardian:
          _desc: Settings for the guardian game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 5
        kaboom:
          _desc: Settings for the kaboom game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 0
        lycan:
          _desc: Settings for the lycan game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 5
        mad:
          _desc: Settings for the mad game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 5
        maelstrom:
          _desc: Settings for the maelstrom game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 0
        masquerade:
          _desc: Settings for the masquerade game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 5
        mudkip:
          _desc: Settings for the mudkip game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 5
        noreveal:
          _desc: Settings for the noreveal game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 1
        pactbreaker:
          _desc: Settings for the pactbreaker game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            clue:
              _desc: Settings related to clue tokens in the pactbreaker mode.
              _type: dict
              _default:
                pool:
                  _desc: >
                    This number is multiplied with the number of players to determine how many total clue tokens
                    are available in the game. Fractions are always rounded up.
                  _type:
                    - float
                    - int
                  _default: 3.2
                bite:
                  _desc: >
                    The maximum number of clue tokens a vampire draws when biting (but not killing or turning) someone.
                  _type: int
                  _default: 2
                bitten:
                  _desc: The maximum number of clue tokens drawn when someone is the target of a vampire bite.
                  _type: int
                  _default: 3
                observe:
                  _desc: >
                    The number of clue tokens consumed by the !observe command during day. This command reveals the
                    target's role, but receives inaccurate readings for cursed villagers and vampires.
                  _type: int
                  _default: 4
                identify:
                  _desc: >
                    The number of clue tokens consumed by the !id command during day. This command reveals the
                    target's role accurately.
                  _type: int
                  _default: 8
                graveyard:
                  _desc: The maximum number of clue tokens drawn when pulling a clue card in the graveyard.
                  _type: int
                  _default: 4
                square:
                  _desc: The maximum number of clue tokens drawn when pulling a clue card in the square.
                  _type: int
                  _default: 2
                forest:
                  _desc: >
                    The maximum number of clue tokens drawn when drawing evidence in the forest when there is
                    nobody left at that location to obtain evidence on.
                  _type: int
                  _default: 3
                streets:
                  _desc: >
                    The maximum number of clue tokens drawn when drawing evidence in the streets when there is
                    nobody left at that location to obtain evidence on.
                  _type: int
                  _default: 1
            turn:
              _desc: >
                How likely vigilante will turn into vampire instead of dying when bitten twice.
                A value between 0 and 1 is the percentage chance for them to turn (e.g. 0.42 is a 42% chance).
              _type:
                - float
                - int
              _default: 0.7
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 0
        random:
          _desc: Settings for the random game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 0
        rapidfire:
          _desc: Settings for the rapidfire game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 0
        sleepy:
          _desc: Settings for the sleepy game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            nightmare:
              _desc: Settings related to the nightmare mechanic in the sleepy mode.
              _type: dict
              _default:
                steps:
                  _desc: >
                    How many steps the chased needs to move forwards in order to escape the nightmare.
                    Reducing this makes it easier for chased to escape, increasing it makes it more difficult.
                    The value must be between 1 and 4, inclusive.
                  _type: int
                  _default: 3
                time:
                  _desc: >
                    How long each round of the nightmare lasts at most. Chased who do not lock in a command in time
                    will default to run, whereas dullahans who do not lock in a command in time will default to chase.
                    No warning points are given for failing to meet time limits. The nightmare will take at most
                    time * steps seconds in total. Setting this to 0 disables timers during nightmares.
                  _type: int
                  _default: 20
            turn:
              _desc: >
                How likely certain roles are to change into other roles when priest dies.
                A value between 0 and 1 is the percentage chance for these roles to turn (e.g. 0.42 is a 42% chance).
              _type:
                - float
                - int
              _default: 0.4
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 5
        valentines:
          _desc: Settings for the valentines game mode.
          _type: dict
          _ctors:
            - _type: int
              _set: weight
          _default:
            weight:
              _desc: How likely this mode is to appear if there are no votes for gamemodes.
              _type: int
              _default: 0

ratelimits: &ratelimits
  _name: ratelimits
  _desc: >
    The ratelimits section defines the various rate limits in the bot. Some rate limits are global whereas others
    are per-user. See the description of each for more details. All rate limits are in seconds. A rate limit of 0
    means there is no rate limit.
  _type: dict
  _default:
    admins:
      _desc: >
        Global rate limit for using the !admins command in channel to mass-ping all admins.
        This limit does not apply when using the command in private, as that will not ping anyone.
      _type: int
      _default: 300
    gamestats:
      _desc: Global rate limit for using the !gamestats command in channel.
      _type: int
      _default: 0
    goat:
      _desc: Per-user rate limit for using the !goat command.
      _type: int
      _default: 300
    playerstats:
      _desc: Global rate limit for using the !playerstats command in channel.
      _type: int
      _default: 0
    rolestats:
      _desc: Global rate limit for using the !rolestats command in channel.
      _type: int
      _default: 0
    start:
      _desc: Per-user rate limit for using the !start command.
      _type: int
      _default: 10
    stats:
      _desc: Global rate limit for using the !stats command in channel.
      _type: int
      _default: 60
    time:
      _desc: Global rate limit for using the !time command in channel.
      _type: int
      _default: 10
    votes:
      _desc: Global rate limit for using the !votes command in channel.
      _type: int
      _default: 60
    wait:
      _desc: Per-user rate limit for using the !wait command.
      _type: int
      _default: 10

timers: &timers
  _name: timers
  _desc: This section defines the various timers that drive gameplay. Numbers are in seconds.
  _type: dict
  _default:
    enabled:
      _desc: Whether or not gameplay timers are enabled. It is recommend to leave these enabled.
      _type: bool
      _default: true
    join:
      _desc: Time limits related to the join phase.
      _type: dict
      _default:
        enabled:
          _desc: Whether or not join limit timers are enabled.
          _type: bool
          _default: true
        limit:
          _desc: The time limit before a game is cancelled due to being in the join phase too long.
          _type: int
          _default: 1800
    night:
      _desc: Time limits related to the night phase.
      _type: dict
      _default:
        enabled:
          _desc: Whether or not night timers are enabled.
          _type: bool
          _default: true
        limit:
          _desc: The time limit for night phase.
          _type: int
          _default: 120
        warn:
          _desc: >
            A warning is printed to channel that night is almost over at this time.
            Must be less than timers.night.limit.
          _type: int
          _default: 90
    day:
      _desc: Time limits related to the day phase.
      _type: dict
      _default:
        enabled:
          _desc: Whether or not day timers are enabled.
          _type: bool
          _default: true
        limit:
          _desc: The time limit for day phase.
          _type: int
          _default: 720
        warn:
          _desc: >
            A warning is printed to channel that day is almost over at this time.
            Must be less than timers.day.limit.
          _type: int
          _default: 600
    shortday:
      _desc: >
        Time limits for short days, which will occur once the number of living players is less than or equal
        to some threshold.
      _type: dict
      _default:
        enabled:
          _desc: >
            Whether or not short day timers are enabled. If disabled, the regular day timer section will apply
            regardless of player count.
          _type: bool
          _default: true
        players:
          _desc: >
            Player threshold for number of alive players. If the number of alive players is less than or equal
            to this number, the timers for short days will be used instead of the normal day timers.
          _type: int
          _default: 6
        limit:
          _desc: The time limit for a short day phase.
          _type: int
          _default: 520
        warn:
          _desc: >
            A warning is printed to channel that day is almost over at this time.
            Must be less than timers.shortday.limit.
          _type: int
          _default: 400
    wait:
      _desc: Settings for the amount of time added after certain events before the game may be started.
      _type: dict
      _default:
        enabled:
          _desc: Whether or not wait timers are enabled. If disabled, !wait has no effect.
          _type: bool
          _default: true
        initial:
          _desc: The initial timer that prevents games being started too quickly after the start of join phase.
          _type: int
          _default: 60
        join:
          _desc: >
            Each join that reaches a new maximum player count for this join phase will add this many seconds
            to the wait timer.
          _type: int
          _default: 25
        command:
          _desc: This section configures how much delay the !wait command adds as well as how often it may be used.
          _type: dict
          _default:
            amount:
              _desc: Amount of seconds added to the wait timer each time the !wait command is used.
              _type: int
              _default: 30
            tokenbucket:
              _desc: >
                The !wait command uses a token bucket to determine how often it may be used. Each time the command is
                used, it will deduct a token from the bucket. If it cannot deduct any tokens, the command fails.
                The token bucket gains new tokens at a refill rate, and can store a maximum number of tokens.
              _type: dict
              _default:
                initial:
                  _desc: Number of tokens the bucket starts with.
                  _type: int
                  _default: 2
                refill:
                  _desc: Number of seconds it takes to add one token to the bucket.
                  _type: int
                  _default: 240
                maximum:
                  _desc: Maximum number of tokens that the bucket can contain.
                  _type: int
                  _default: 3

reaper: &reaper
  _name: reaper
  _desc: >
    The reaper section defines the grace period for certain events that indicate a player is no longer actively
    participating in the game. If the grace period is exceeded, the reaper will kill that player and give them
    warning points.
  _type: dict
  _default:
    enabled:
      _desc: Whether or not the reaper is enabled. If disabled, nobody will idle out or get automatic warnings.
      _type: bool
      _default: true
    autowarn:
      _desc: >
        Whether or not to automatically issue warnings to users who are killed by the reaper. If disabled,
        users will still be removed from the game and are guaranteed a game loss, but there will be no further
        consequences applied to them. If this setting is disabled, the various points settings elsewhere in reaper
        settings have no effect.
      _type: bool
      _default: true
    idle:
      _desc: >
        Idle time is defined as how long it has been since the user has spoken in channel. If gameplay.nightchat
        is disabled, the idle timer is paused during night. Warnings will be given to the user in channel and in
        private at certain thresholds to let them know that they need to speak in the channel.
      _type: dict
      _default:
        enabled:
          _desc: Whether or not idle warnings are enabled.
          _type: bool
          _default: true
        warn:
          _desc: How long to wait before warning the user that they are idling.
          _type: dict
          _default:
            channel:
              _desc: Delay before warning the user in channel that they are idling.
              _type: int
              _default: 180
            private:
              _desc: Delay before warning the user in private that they are idling.
              _type: int
              _default: 240
        grace:
          _desc: How long can a user idle and still remain alive?
          _type: int
          _default: 300
        points:
          _desc: Number of warning points to apply to the user if they idle out.
          _type: int
          _default: 1
        expiration:
          _desc: Expiration time for the warning applied to the user when they idle out.
          _type: str
          _default: 30d
    night_idle:
      _desc: >
        Whether or not to warn users who fail to act at night. All other warning types from the reaper
        will override this, so that they do not stack. A user will get a maximum of one warning per game.
      _type: dict
      _default:
        enabled:
          _desc: Whether or not night idle warnings are enabled.
          _type: bool
          _default: true
        points:
          _desc: Number of warning points to apply to the user if they fail to act at night.
          _type: int
          _default: 1
        expiration:
          _desc: Expiration time for the warning applied to the user when they fail to act at night.
          _type: str
          _default: 14d
    part:
      _desc: >
        If a user leaves the game channel, this defines the grace time they have to rejoin it.
        Not every transport has the notion of leaving a game channel.
        Kicking the user out of a channel immediately gives them a warning and kills them.
      _type: dict
      _default:
        enabled:
          _desc: Whether or not part warnings are enabled.
          _type: bool
          _default: true
        grace:
          _desc: How long can a user stay out of the channel and still remain alive?
          _type: int
          _default: 30
        points:
          _desc: Number of warning points to apply to the user if they are gone for too long.
          _type: int
          _default: 1
        expiration:
          _desc: Expiration time for the warning applied to the user when they are gone for too long.
          _type: str
          _default: 30d
    quit:
      _desc: >
        If a user leaves the server, this defines the grace time they have to rejoin it.
        Not every transport has the notion of leaving a server.
        Kicking the user out of a server immediately gives them a warning and kills them.
      _type: dict
      _default:
        enabled:
          _desc: Whether or not quit warnings are enabled.
          _type: bool
          _default: true
        grace:
          _desc: How long can a user stay out of the server and still remain alive?
          _type: int
          _default: 60
        points:
          _desc: Number of warning points to apply to the user if they are gone for too long.
          _type: int
          _default: 1
        expiration:
          _desc: Expiration time for the warning applied to the user when they are gone for too long.
          _type: str
          _default: 30d
    account:
      _desc: >
        If the user changes what account they are logged into, this defines the grace time they have to
        switch back to their original account. Not every transport has the notion of changing what account
        a user is logged into.
      _type: dict
      _default:
        enabled:
          _desc: Whether or not account warnings are enabled.
          _type: bool
          _default: true
        grace:
          _desc: How long can a user stay logged into a different account and still remain alive?
          _type: int
          _default: 30
        points:
          _desc: Number of warning points to apply to the user if they have the wrong account for too long.
          _type: int
          _default: 1
        expiration:
          _desc: Expiration time for the warning applied to the user when they have the wrong account for too long.
          _type: str
          _default: 30d
    leave:
      _desc: >
        If the user chooses to '!quit -force' during the game, this defines the applied sanctions.
        Note that, unlike the other entries here, this does not have a grace period, and instead will
        instantly applies the sanction.
      _type: dict
      _default:
        enabled:
          _desc: Whether or not game quit warnings are enabled.
          _type: bool
          _default: true
        points:
          _desc: Number of warning points to apply to the user if they choose to '!quit -force' the game.
          _type: int
          _default: 1
        expiration:
          _desc: Expiration time for the warning applied to the user who chose to '!quit -force' the game.
          _type: str
          _default: 30d

warnings.sanction.scalestasis: &warnings.sanction.scalestasis
  _name: warnings.sanction.scalestasis
  _desc: >
    Adds stasis to the user according to the quadratic expression ax^2 + bx + c, where x is the number of active
    warning points the user has.
  _type: dict
  _default:
    a:
      _desc: Quadradic scaling factor
      _type:
        - float
        - int
      _default: 0
    b:
      _desc: Linear scaling factor
      _type:
        - float
        - int
      _default: 1
    c:
      _desc: Constant scaling factor
      _type:
        - float
        - int
      _default: 0

warnings.sanction: &warnings.sanction
  _name: warnings.sanction
  _desc: Criteria of when an automatic sanction should be applied and the definition of what sanctions to apply.
  _type: dict
  _default:
    min:
      _desc: Minimum number of active warning points the user must have before this automatic sanction applies.
      _type: int
    max:
      _desc: Maximum number of active warning points the user must have before this automatic sanction stops applying.
      _type: int
    stasis:
      _desc: If defined, adds this many games of stasis to the user.
      _type: int
      _nullable: true
      _default: null
    scalestasis:
      _desc: >
        If defined, adds this many games of stasis to the user according to the supplied formula,
        which is passed the total number of active warning points the user has as input.
      _type: *warnings.sanction.scalestasis
      _nullable: true
      _default: null
    tempban:
      _desc: >
        If defined, temporarily bans the user from the channel. It can be an integer x, in which case the user is
        banned until enough warnings expire for them to bring them down to x active warning points or below.
        It can also be a string, which defines a length of time to ban the user for. The string should be a number
        followed by "d" for days, "h" for hours, or "m" for minutes, e.g. "3d" for 3 days.
      _type:
        - int
        - str
      _nullable: true
      _default: null
    deny:
      _desc: >
        If defined, prevents the user from using this list of commands. The strings in the list should be the internal
        command names, not a localized version. Denying access to a command also denies access to all aliases of
        that command.
      _type: list
      _nullable: true
      _default: null
      _items:
        _type: str

warnings: &warnings
  _name: warnings
  _desc: >
    The warnings section defines the warning track in which users will automatically accumulate sactions.
    Sanctions can be manually applied to warnings as well.
  _type: dict
  _default:
    default_expiration:
      _desc: The default expiration time for manually-issued warnings.
      _type: str
      _default: 30d
    sanctions:
      _desc: >
        The automatic sanction track. Defining your own track will overwrite the default one.
        Each entry in the track defines a threshold and sanctions, see the warnings.sanction type
        documentation for more information. These must be defined in order.
      _type: list
      _merge: replace
      _default:
        - min: 2
          max: 9
          stasis: 1
          scalestasis:
            a: 0.15
            b: 0.21
            c: -1
        - min: 10
          max: 10
          tempban: 5
      _items:
        _type: *warnings.sanction

telemetry: &telemetry
  _name: telemetry
  _desc: This section defines what data is sent to the lykos developers to help us improve the bot.
  _type: dict
  _default:
    errors:
      _desc: >
        When an error occurs, we automatically send error details to the developers. You can control
        what data is sent. By default, we respect the privacy of you and your users and send only a bare minimum
        of data that fully anonymizes your users. We do not officially support opting out of sending error telemetry.
      _type: dict
      _default:
        traceback_verbosity:
          _desc: >
            Whether or not information about variable values is sent along with the error details.
            This can be one of the following values:

            * 0: Do not send any variable information along with the error message.

            * 1: Send variable information for the innermost stack frame along with the error message.

            * 2 or higher: Send variable information for all stack frames along with the error message.
          _type: int
          _default: 0
        user_data_level:
          _desc: >
            How much data about the users is exposed in variable information and the traceback message.
            This can be one of the following values:

            * 0: Fully anonymize users.

            * 1: Expose the user's display name only.

            * 2 or more: Expose all details about the user (display name, account, channel membership, etc.).
          _type: int
          _default: 0
        channel_data_level:
          _desc: >
            How much data about channels is exposed in variable information and the traceback message.
            This can be one of the following values:

            * 0: Fully anonymize channels.

            * 1 or more: Expose the channel's name.
          _type: int
          _default: 0
    usage:
      _desc: >
        Send data about various aspects of the bot's usage, to help lykos developers better understand
        how various bots are being used in the wild. This data helps focus efforts for feature development
        and environment support.
      _type: dict
      _default:
        game_data:
          _desc: >
            If true, sends information about game mode, game size, winner, and settings that impact
            gameplay. No data about the players themselves is sent. This data helps the developers
            better evaluate and tweak balance for game modes.
          _type: bool
          _default: false
        environment_data:
          _desc: >
            If true, sends information about the environment the bot is running on, including OS version,
            python version, and versions of all pip dependencies. This data helps the developers better
            evaluate what versions of things will be supported and when to drop support for older things.
          _type: bool
          _default: false

debug: &debug
  _name: debug
  _desc: >
    This section defines special handling that aids in debugging the bot. Debug mode should '''not'''
    be enabled during the course of normal bot operation.
  _type: dict
  _default:
    enabled:
      _desc: >
        Whether or not debug mode is enabled. This will enable a variety of commands that aid in debugging.
        If disabled, none of the other options in this section have any effect.
      _type: bool
      _default: false
    messages:
      _desc: Options related to debugging the messages system
      _type: dict
      _default:
        nothrow:
          _desc: >
            If true, most errors in the messages system will be sent to the client instead of causing the
            bot to log an error and interrupt execution of the current routine. If working on translations, it
            is recommended to enable this at first while ironing out the bulk of issues, then leave it
            disabled while performing final testing.
          _type: bool
          _default: false
    containers:
      _desc: Options related to debugging various internal containers (CheckedDict, CheckedList, CheckedSet)
      _type: dict
      _default:
        names:
          _desc: Container names to enable debug history for
          _type: list
          _default: []
          _items:
            _type: str
        limit:
          _desc: Max number of history entries to store per container
          _type: int
          _default: 50
    gameplay:
      _desc: Options related to playing games while in debug mode
      _type: dict
      _default:
        timelord:
          _desc: >
            Whether or not time lord will reduce timers when they die. If false, we still play the message
            and otherwise pretend that timers were reduced, but do not actually modify the timers.
          _type: bool
          _default: true

_name: root
_desc: Top-level configuration object
_type: dict
_default:
  transports: *transports
  ssl: *ssl
  access: *access
  logging: *logging
  gameplay: *gameplay
  ratelimits: *ratelimits
  timers: *timers
  reaper: *reaper
  warnings: *warnings
  telemetry: *telemetry
  debug: *debug
