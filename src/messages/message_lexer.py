# Generated from message_lexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,213,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,
        2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,
        10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
        16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,
        23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,4,0,78,8,0,11,0,12,0,79,1,1,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,4,3,91,8,3,11,3,12,3,92,1,4,1,4,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,4,7,115,8,7,11,7,12,7,116,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,
        9,1,9,1,9,1,10,1,10,4,10,131,8,10,11,10,12,10,132,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,15,4,15,153,8,15,11,15,12,15,154,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,17,1,18,1,18,4,18,169,8,18,11,18,12,18,170,
        1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,4,23,201,8,23,11,23,12,23,202,1,24,1,24,1,24,1,24,1,24,
        1,25,1,25,1,25,1,25,0,0,26,7,1,9,2,11,3,13,4,15,5,17,6,19,7,21,8,
        23,0,25,0,27,9,29,10,31,11,33,0,35,12,37,13,39,0,41,0,43,14,45,0,
        47,0,49,15,51,0,53,16,55,0,57,17,7,0,1,2,3,4,5,6,5,4,0,91,91,93,
        93,123,123,125,125,2,0,65,90,97,122,4,0,33,33,58,58,123,123,125,
        125,4,0,40,41,58,58,123,123,125,125,3,0,40,41,123,123,125,125,221,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,1,13,1,0,0,0,1,15,1,0,0,0,1,
        17,1,0,0,0,1,19,1,0,0,0,2,21,1,0,0,0,2,23,1,0,0,0,2,25,1,0,0,0,3,
        27,1,0,0,0,3,29,1,0,0,0,3,31,1,0,0,0,3,33,1,0,0,0,3,35,1,0,0,0,4,
        37,1,0,0,0,4,39,1,0,0,0,4,41,1,0,0,0,5,43,1,0,0,0,5,45,1,0,0,0,5,
        47,1,0,0,0,5,49,1,0,0,0,5,51,1,0,0,0,6,53,1,0,0,0,6,55,1,0,0,0,6,
        57,1,0,0,0,7,77,1,0,0,0,9,81,1,0,0,0,11,85,1,0,0,0,13,90,1,0,0,0,
        15,94,1,0,0,0,17,96,1,0,0,0,19,100,1,0,0,0,21,114,1,0,0,0,23,118,
        1,0,0,0,25,123,1,0,0,0,27,130,1,0,0,0,29,134,1,0,0,0,31,138,1,0,
        0,0,33,142,1,0,0,0,35,147,1,0,0,0,37,152,1,0,0,0,39,156,1,0,0,0,
        41,161,1,0,0,0,43,168,1,0,0,0,45,172,1,0,0,0,47,176,1,0,0,0,49,181,
        1,0,0,0,51,185,1,0,0,0,53,200,1,0,0,0,55,204,1,0,0,0,57,209,1,0,
        0,0,59,60,8,0,0,0,60,78,6,0,0,0,61,62,5,123,0,0,62,63,5,123,0,0,
        63,64,1,0,0,0,64,78,6,0,1,0,65,66,5,125,0,0,66,67,5,125,0,0,67,68,
        1,0,0,0,68,78,6,0,2,0,69,70,5,91,0,0,70,71,5,91,0,0,71,72,1,0,0,
        0,72,78,6,0,3,0,73,74,5,93,0,0,74,75,5,93,0,0,75,76,1,0,0,0,76,78,
        6,0,4,0,77,59,1,0,0,0,77,61,1,0,0,0,77,65,1,0,0,0,77,69,1,0,0,0,
        77,73,1,0,0,0,78,79,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,8,1,0,
        0,0,81,82,5,91,0,0,82,83,1,0,0,0,83,84,6,1,5,0,84,10,1,0,0,0,85,
        86,5,123,0,0,86,87,1,0,0,0,87,88,6,2,6,0,88,12,1,0,0,0,89,91,7,1,
        0,0,90,89,1,0,0,0,91,92,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,14,
        1,0,0,0,94,95,5,47,0,0,95,16,1,0,0,0,96,97,5,61,0,0,97,98,1,0,0,
        0,98,99,6,5,7,0,99,18,1,0,0,0,100,101,5,93,0,0,101,102,1,0,0,0,102,
        103,6,6,8,0,103,20,1,0,0,0,104,105,8,0,0,0,105,115,6,7,9,0,106,107,
        5,123,0,0,107,108,5,123,0,0,108,109,1,0,0,0,109,115,6,7,10,0,110,
        111,5,125,0,0,111,112,5,125,0,0,112,113,1,0,0,0,113,115,6,7,11,0,
        114,104,1,0,0,0,114,106,1,0,0,0,114,110,1,0,0,0,115,116,1,0,0,0,
        116,114,1,0,0,0,116,117,1,0,0,0,117,22,1,0,0,0,118,119,5,123,0,0,
        119,120,1,0,0,0,120,121,6,8,6,0,121,122,6,8,12,0,122,24,1,0,0,0,
        123,124,5,93,0,0,124,125,1,0,0,0,125,126,6,9,8,0,126,127,6,9,13,
        0,127,26,1,0,0,0,128,129,8,2,0,0,129,131,6,10,14,0,130,128,1,0,0,
        0,131,132,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,28,1,0,0,0,
        134,135,5,33,0,0,135,136,1,0,0,0,136,137,6,11,15,0,137,30,1,0,0,
        0,138,139,5,58,0,0,139,140,1,0,0,0,140,141,6,12,16,0,141,32,1,0,
        0,0,142,143,5,123,0,0,143,144,1,0,0,0,144,145,6,13,6,0,145,146,6,
        13,12,0,146,34,1,0,0,0,147,148,5,125,0,0,148,149,1,0,0,0,149,150,
        6,14,8,0,150,36,1,0,0,0,151,153,7,1,0,0,152,151,1,0,0,0,153,154,
        1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,38,1,0,0,0,156,157,5,
        58,0,0,157,158,1,0,0,0,158,159,6,16,16,0,159,160,6,16,17,0,160,40,
        1,0,0,0,161,162,5,125,0,0,162,163,1,0,0,0,163,164,6,17,8,0,164,165,
        6,17,18,0,165,42,1,0,0,0,166,167,8,3,0,0,167,169,6,18,19,0,168,166,
        1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,44,1,
        0,0,0,172,173,5,58,0,0,173,174,1,0,0,0,174,175,6,19,17,0,175,46,
        1,0,0,0,176,177,5,123,0,0,177,178,1,0,0,0,178,179,6,20,6,0,179,180,
        6,20,12,0,180,48,1,0,0,0,181,182,5,40,0,0,182,183,1,0,0,0,183,184,
        6,21,20,0,184,50,1,0,0,0,185,186,5,125,0,0,186,187,1,0,0,0,187,188,
        6,22,8,0,188,189,6,22,18,0,189,52,1,0,0,0,190,191,8,4,0,0,191,201,
        6,23,21,0,192,193,5,123,0,0,193,194,5,123,0,0,194,195,1,0,0,0,195,
        201,6,23,22,0,196,197,5,125,0,0,197,198,5,125,0,0,198,199,1,0,0,
        0,199,201,6,23,23,0,200,190,1,0,0,0,200,192,1,0,0,0,200,196,1,0,
        0,0,201,202,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,54,1,0,0,
        0,204,205,5,123,0,0,205,206,1,0,0,0,206,207,6,24,6,0,207,208,6,24,
        12,0,208,56,1,0,0,0,209,210,5,41,0,0,210,211,1,0,0,0,211,212,6,25,
        8,0,212,58,1,0,0,0,17,0,1,2,3,4,5,6,77,79,92,114,116,132,154,170,
        200,202,24,1,0,0,1,0,1,1,0,2,1,0,3,1,0,4,5,1,0,5,3,0,2,2,0,4,0,0,
        1,7,5,1,7,6,1,7,7,7,3,0,7,7,0,1,10,8,2,4,0,2,5,0,7,11,0,7,12,0,1,
        18,9,5,6,0,1,23,10,1,23,11,1,23,12
    ]

class message_lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IN_TAG = 1
    IN_TAG_PARAM = 2
    IN_SUB = 3
    IN_CONV = 4
    IN_SPEC = 5
    IN_ARGLIST = 6

    TEXT = 1
    OPEN_TAG = 2
    OPEN_SUB = 3
    TAG_NAME = 4
    TAG_SLASH = 5
    TAG_SEP = 6
    CLOSE_TAG = 7
    TAG_PARAM = 8
    SUB_FIELD = 9
    SUB_CONVERT = 10
    SUB_SPEC = 11
    CLOSE_SUB = 12
    SUB_IDENTIFIER = 13
    SPEC_VALUE = 14
    OPEN_ARGLIST = 15
    ARGLIST_VALUE = 16
    CLOSE_ARGLIST = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "IN_TAG", "IN_TAG_PARAM", "IN_SUB", "IN_CONV", 
                  "IN_SPEC", "IN_ARGLIST" ]

    literalNames = [ "<INVALID>",
            "'['", "'{'", "'/'", "'='", "'!'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "TEXT", "OPEN_TAG", "OPEN_SUB", "TAG_NAME", "TAG_SLASH", "TAG_SEP", 
            "CLOSE_TAG", "TAG_PARAM", "SUB_FIELD", "SUB_CONVERT", "SUB_SPEC", 
            "CLOSE_SUB", "SUB_IDENTIFIER", "SPEC_VALUE", "OPEN_ARGLIST", 
            "ARGLIST_VALUE", "CLOSE_ARGLIST" ]

    ruleNames = [ "TEXT", "OPEN_TAG", "OPEN_SUB", "TAG_NAME", "TAG_SLASH", 
                  "TAG_SEP", "CLOSE_TAG", "TAG_PARAM", "TAG_OPEN_SUB", "TAG_PARAM_CLOSE", 
                  "SUB_FIELD", "SUB_CONVERT", "SUB_SPEC", "SUB_OPEN_SUB", 
                  "CLOSE_SUB", "SUB_IDENTIFIER", "CONV_SPEC", "CLOSE_CONV", 
                  "SPEC_VALUE", "SPEC_SEP", "SPEC_OPEN_SUB", "OPEN_ARGLIST", 
                  "CLOSE_SPEC", "ARGLIST_VALUE", "ARGLIST_OPEN_SUB", "CLOSE_ARGLIST" ]

    grammarFileName = "message_lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[0] = self.TEXT_action 
            actions[7] = self.TAG_PARAM_action 
            actions[10] = self.SUB_FIELD_action 
            actions[18] = self.SPEC_VALUE_action 
            actions[23] = self.ARGLIST_VALUE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def TEXT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
             self.append_text() 
     

        if actionIndex == 1:
             self.append_text("{") 
     

        if actionIndex == 2:
             self.append_text("}") 
     

        if actionIndex == 3:
             self.append_text("[") 
     

        if actionIndex == 4:
             self.append_text("]") 
     

    def TAG_PARAM_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
             self.append_text() 
     

        if actionIndex == 6:
             self.append_text("{") 
     

        if actionIndex == 7:
             self.append_text("}") 
     

    def SUB_FIELD_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 8:
             self.append_text() 
     

    def SPEC_VALUE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 9:
             self.append_text() 
     

    def ARGLIST_VALUE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 10:
             self.append_text() 
     

        if actionIndex == 11:
             self.append_text("{") 
     

        if actionIndex == 12:
             self.append_text("}") 
     


